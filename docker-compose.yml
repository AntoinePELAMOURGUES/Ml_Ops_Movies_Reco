version: '3.9'

x-airflow-common:
  &airflow-common
  # Sets the name of the image and defaults to "airflow" if the env variable $AIRFLOW_IMAGE_NAME is not set.
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.1}
  # Builds the image from the Dockerfile ./dockerfiles/airflow/Dockerfile.
  # Uncomment the build line if you need to build the image locally.
  container_name: airflow
  build: ./airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_HOME: /opt/airflow
    PYTHONPATH: "$$PYTHONPATH:/opt/airflow/plugins"
    # Sets the tracking uri env variable for mlflow in all airflow containers
    MLFLOW_TRACKING_URI: "http://mlflow-webserver:5000"
    GIT_PYTHON_REFRESH: "quiet"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./data/raw:/opt/airflow/data/raw
    - ./data/model:/opt/airflow/model
  user: "1000:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
      - app

services:

  # # This container runs the postgresql database for mlflow.
  # postgres-mlflow:
  #   image: postgres:13
  #   container_name: fastapi
  #   environment:
  #     POSTGRES_USER: mlflow
  #     POSTGRES_PASSWORD: mlflow
  #     POSTGRES_DB: mlflow
  #   volumes:
  #     - postgres-db-volume-mlflow:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "mlflow"]
  #     interval: 5s
  #     retries: 5
  #   restart: always
  #   networks:
  #     - app

  # # This container runs the artifact storage as an S3 server.
  # s3-artifact-storage:
  #   image: minio/minio
  #   volumes:
  #     - mlflow-data:/data
  #   environment:
  #     &env-mlflow-s3
  #     MINIO_ROOT_USER: mlflow_access
  #     MINIO_ROOT_PASSWORD: mlflow_secret
  #   command: server /data --console-address ":9001"
  #   ports:
  #     - 9000:9000
  #     - 9001:9001
  #   healthcheck:
  #     test: ["CMD", "curl -I http://localhost:9000/minio/health/live"]
  #     interval: 5s
  #     retries: 5
  #   restart: always
  #   networks:
  #     - app

  # # This container creates the "data" in the S3 server, in which mlflow will later store the artifacts.
  # mlflow-init:
  #   image: minio/mc
  #   depends_on:
  #     - s3-artifact-storage
  #   environment:
  #     <<: *env-mlflow-s3
  #   entrypoint: >
  #     /bin/sh -c "
  #     /usr/bin/mc config host add myminio http://s3-artifact-storage:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
  #     /usr/bin/mc mb myminio/data;
  #     /usr/bin/mc policy download myminio/data;
  #     exit 0;
  #     "

  # # This container runs the webserver for mlflow.
  # mlflow-webserver:
  #   build: ./mlflow
  #   ports:
  #     - 5000:5000
  #   environment:
  #     MLFLOW_S3_ENDPOINT_URL: http://s3-artifact-storage:9000
  #     MLFLOW_S3_IGNORE_TLS: "true"
  #     AWS_ACCESS_KEY_ID: "mlflow_access"
  #     AWS_SECRET_ACCESS_KEY: "mlflow_secret"
  #   command: mlflow server --backend-store-uri postgresql://mlflow:mlflow@postgres-mlflow/mlflow --artifacts-destination s3://data -h 0.0.0.0 -p 5000 --serve-artifacts
  #   depends_on:
  #     - postgres-mlflow
  #     - s3-artifact-storage
  #     - mlflow-init
  #   networks:
  #     - app

  # This container runs the postgresql server for airflow.
  postgres:
    image: postgres:13
    container_name: postgre_airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume-airflow:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - app

  # The redis - broker that forwards messages from scheduler to worker.
  redis:
    image: redis:7.2-bookworm
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - app

  # The webserver is available at http://localhost:8085
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow_webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app

  # The scheduler monitors all tasks and DAGs, then triggers the task instances once their dependencies are complete.
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow_scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app

  # The worker that executes the tasks given by the scheduler.
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: airflow_worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    container_name: airflow_triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app

  # The initialization service.
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    container_name: airflow_init
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins /sources/mlflow-data
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - .:/sources
    networks:
      - app

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  # The flower app for monitoring the environment. It is available at http://localhost:5555.
  flower:
    <<: *airflow-common
    command: celery flower
    container_name: flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - app

  mongodb:
    image: mongo:latest
    volumes:
      - mongodb_data:/data/db
      - ./data/raw/:/data/raw
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    container_name: mongodb
    networks:
      - app

  mongodb_exporter:
    image: percona/mongodb_exporter:0.42.0
    container_name: mongodb_exporter
    environment:
      - MONGODB_URI=mongodb://antoine:pela@mongodb:27017/admin
    ports:
      - "9216:9216"  # Port par défaut pour l'exportateur
    networks:
      - app

  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./fastapi/app:/app
      - ./data/raw/:/app/raw
      - ./data/model/:/app/model
      - shared_user_db:/app/user_db
    ports:
      - "8000:8000"
    restart: always
    networks:
      - app
    container_name: fastapi

  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    restart: always
    networks:
      - app
    depends_on:
      - fastapi
    container_name: streamlit

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - shared_prometheus:/var/log/prometheus # Volume pour logs Prometheus
    ports:
      - "9090:9090"
    container_name: prometheus
    networks:
      - app

  grafana:
    image: grafana/grafana-enterprise
    restart: unless-stopped
    environment:
      - GF_SERVER_ROOT_URL=http://my.grafana.server/
      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_SECURITY_ALLOW_EMBEDDING=true
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    container_name: grafana
    networks:
      - app

  node-exporter:
    image: prom/node-exporter
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100" # Expose le port pour Node Exporter
    networks:
      - app

networks:
  app:
    driver: bridge

volumes:
  mongodb_data:
  shared_user_db:
  shared_prometheus:
  grafana_data:
  postgres-db-volume-airflow:
